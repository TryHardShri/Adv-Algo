//DELETION CODE:
#include <iostream>
using namespace std;

// A BTree node
class BTreeNode {
int *keys; // An array of keys
int t; // Minimum degree (defines the range for number of keys)
BTreeNode **C; // An array of child pointers
int n; // Current number of keys
bool leaf; // Is true when node is leaf. Otherwise false

public:

BTreeNode(int _t, bool _leaf); // Constructor

// A utility function to insert a new key in the subtree rooted with this node
void insertNonFull(int k);

// A utility function to split the child y of this node
void splitChild(int i, BTreeNode *y);

// A function to traverse all nodes in a subtree rooted with this node
void traverse();

// A function to search a key in the subtree rooted with this node
BTreeNode *search(int k); // returns NULL if k is not present.

// A function to delete a key from this node
void remove(int k);

// A utility function to delete a key from the non-full node
void removeFromNonLeaf(int idx);

// A utility function to get the predecessor of the keys[idx]
int getPredecessor(int idx);

// A utility function to get the successor of the keys[idx]
int getSuccessor(int idx);

// A utility function to fill child C[idx] if it has less than t keys

void fill(int idx);

// A utility function to borrow a key from C[idx-1] and insert it into C[idx]
void borrowFromPrev(int idx);

// A utility function to borrow a key from C[idx+1] and insert it into C[idx]
void borrowFromNext(int idx);

// A utility function to merge C[idx] with C[idx+1]
void merge(int idx);

friend class BTree;
};

// A BTree
class BTree {
BTreeNode *root; // Pointer to root node
int t; // Minimum degree

public:
BTree(int _t) { root = NULL; t = _t; }

void traverse() { if (root != NULL) root->traverse(); }

BTreeNode* search(int k) { return (root == NULL) ? NULL : root-
>search(k); }

void insert(int k) {

if (root == NULL) {
root = new BTreeNode(t, true);
root->keys[0] = k;
root->n = 1;
} else {
if (root->n == 2 * t - 1) {
BTreeNode *s = new BTreeNode(t, false);
s->C[0] = root;
s->splitChild(0, root);
int i = 0;
if (s->keys[0] < k) i++;
s->C[i]->insertNonFull(k);
root = s;
} else {
root->insertNonFull(k);
}
}
}

void remove(int k) {
if (!root) {
cout << "The tree is empty." << endl;
return;
}
root->remove(k);
if (root->n == 0) {
BTreeNode *tmp = root;

if (root->leaf) root = NULL;
else root = root->C[0];
delete tmp;
}
}
};

// Constructor for BTreeNode class
BTreeNode::BTreeNode(int t1, bool leaf1) {
t = t1;
leaf = leaf1;
keys = new int[2 * t - 1];
C = new BTreeNode *[2 * t];
n = 0;
}

void BTreeNode::traverse() {
int i;
for (i = 0; i < n; i++) {
if (leaf == false) C[i]->traverse();
cout << " " << keys[i];
}
if (leaf == false) C[i]->traverse();
}

BTreeNode *BTreeNode::search(int k) {
int i = 0;

while (i < n && k > keys[i]) i++;
if (i < n && keys[i] == k) return this;
if (leaf == true) return NULL;
return C[i]->search(k);
}

void BTreeNode::insertNonFull(int k) {
int i = n - 1;
if (leaf == true) {
while (i >= 0 && keys[i] > k) {
keys[i + 1] = keys[i];
i--;
}
keys[i + 1] = k;
n++;
} else {
while (i >= 0 && keys[i] > k) i--;
if (C[i + 1]->n == 2 * t - 1) {
splitChild(i + 1, C[i + 1]);
if (keys[i + 1] < k) i++;
}
C[i + 1]->insertNonFull(k);
}
}

void BTreeNode::splitChild(int i, BTreeNode *y) {
BTreeNode *z = new BTreeNode(y->t, y->leaf);

z->n = t - 1;
for (int j = 0; j < t - 1; j++) z->keys[j] = y->keys[j + t];
if (y->leaf == false) {
for (int j = 0; j < t; j++) z->C[j] = y->C[j + t];
}
y->n = t - 1;
for (int j = n; j >= i + 1; j--) C[j + 1] = C[j];
C[i + 1] = z;
for (int j = n - 1; j >= i; j--) keys[j + 1] = keys[j];
keys[i] = y->keys[t - 1];
n++;
}

void BTreeNode::remove(int k) {
int idx = 0;
while (idx < n && keys[idx] < k) idx++;

if (idx < n && keys[idx] == k) {
if (leaf) removeFromNonLeaf(idx);
else {
removeFromNonLeaf(idx);
}
} else {
if (leaf) {
cout << "The key " << k << " is not found in the tree." << endl;
return;
}

bool isLast = (idx == n);
if (C[idx]->n < t) fill(idx);

if (isLast && idx > n) C[idx - 1]->remove(k);
else C[idx]->remove(k);
}
}

void BTreeNode::removeFromNonLeaf(int idx) {
int k = keys[idx];

if (C[idx]->n >= t) {
int pred = getPredecessor(idx);
keys[idx] = pred;
C[idx]->remove(pred);
} else if (C[idx + 1]->n >= t) {
int succ = getSuccessor(idx);
keys[idx] = succ;
C[idx + 1]->remove(succ);
} else {
merge(idx);
C[idx]->remove(k);
}
}

int BTreeNode::getPredecessor(int idx) {

BTreeNode *cur = C[idx];
while (!cur->leaf) cur = cur->C[cur->n];
return cur->keys[cur->n - 1];
}

int BTreeNode::getSuccessor(int idx) {
BTreeNode *cur = C[idx + 1];
while (!cur->leaf) cur = cur->C[0];
return cur->keys[0];
}

void BTreeNode::fill(int idx) {
if (idx != 0 && C[idx - 1]->n >= t) borrowFromPrev(idx);
else if (idx != n && C[idx + 1]->n >= t) borrowFromNext(idx);
else {
if (idx != n) merge(idx);
else merge(idx - 1);
}
}

void BTreeNode::borrowFromPrev(int idx) {
BTreeNode *child = C[idx];
BTreeNode *sibling = C[idx - 1];

for (int i = child->n - 1; i >= 0; i--) child->keys[i + 1] = child->keys[i];

if (!child->leaf) {

for (int i = child->n; i >= 0; i--) child->C[i + 1] = child->C[i];
}

child->keys[0] = keys[idx - 1];

if (!child->leaf) child->C[0] = sibling->C[sibling->n];

keys[idx - 1] = sibling->keys[sibling->n - 1];
child->n++;
sibling->n--;
}

void BTreeNode::borrowFromNext(int idx) {
BTreeNode *child = C[idx];
BTreeNode *sibling = C[idx + 1];

child->keys[child->n] = keys[idx];

if (!child->leaf) child->C[child->n + 1] = sibling->C[0];

keys[idx] = sibling->keys[0];

for (int i = 1; i < sibling->n; i++) sibling->keys[i - 1] = sibling->keys[i];

if (!sibling->leaf) {
for (int i = 1; i <= sibling->n; i++) sibling->C[i - 1] = sibling->C[i];
}

child->n++;
sibling->n--;
}

void BTreeNode::merge(int idx) {
BTreeNode *child = C[idx];
BTreeNode *sibling = C[idx + 1];

child->keys[t - 1] = keys[idx];

for (int i = 0; i < sibling->n; i++) child->keys[i + t] = sibling->keys[i];

if (!child->leaf) {
for (int i = 0; i <= sibling->n; i++) child->C[i + t] = sibling->C[i];
}

for (int i = idx + 1; i < n; i++) keys[i - 1] = keys[i];

for (int i = idx + 2; i <= n; i++) C[i - 1] = C[i];

child->n += sibling->n + 1;
n--;
delete sibling;
}

// Driver program to test above functions

int main() {
int degree;
cout << "Enter the minimum degree of the B-Tree: ";
cin >> degree;
BTree t(degree);

int numKeys, key;
cout << "Enter the number of keys you want to insert: ";
cin >> numKeys;

// Inserting keys into the B-Tree
for (int i = 0; i < numKeys; i++) {
cout << "Enter key " << i + 1 << ": ";
cin >> key;
t.insert(key);
}

cout << "Traversal of the constructed tree is: ";
t.traverse();
cout << endl;

// Searching for keys
int searchKey;
cout << "Enter key to search in the tree: ";
cin >> searchKey;
BTreeNode *result = t.search(searchKey);
if (result != NULL)

cout << "Key " << searchKey << " is present in the tree." << endl;
else
cout << "Key " << searchKey << " is not present in the tree." << endl;

// Deleting keys
int deleteKey;
cout << "Enter key to delete from the tree: ";
cin >> deleteKey;
t.remove(deleteKey);
cout << "Traversal after deletion is: ";
t.traverse();
cout << endl;

return 0;
}
