#include <bits/stdc++.h>
using namespace std;
// A structure to represent a weighted edge in graph
struct Edge {
int src, dest, weight;
};
// A structure to represent a connected, directed and
// weighted graph
struct Graph {
int V, E;
struct Edge* edge;
};
// Creates a graph with V vertices and E edges
struct Graph* createGraph(int V, int E) {
struct Graph* graph = new Graph;
graph->V = V;
graph->E = E;
graph->edge = new Edge[E];
return graph;
}
// A utility function used to print the solution
void printArr(int dist[], int V) {
printf("Vertex Distance from Source\n");
for (int i = 0; i < V; ++i) {
if (dist[i] == INT_MAX)
printf("%d \t\t INF\n", i); // If vertex is unreachable, print INF
else
printf("%d \t\t %d\n", i, dist[i]);

}
}
// The main function that finds shortest distances from src
// to all other vertices using Bellman-Ford algorithm. The
// function also detects negative weight cycles
void BellmanFord(struct Graph* graph, int src) {
int V = graph->V;
int E = graph->E;
int dist[V];
// Step 1: Initialize distances from src to all other vertices as
INFINITE
fill(dist, dist + V, INT_MAX); // Alternatively, you could use
memset
dist[src] = 0;
// Step 2: Relax all edges |V| - 1 times.
for (int i = 1; i <= V - 1; i++) {
for (int j = 0; j < E; j++) {
int u = graph->edge[j].src;
int v = graph->edge[j].dest;
int weight = graph->edge[j].weight;
if (dist[u] != INT_MAX && dist[u] + weight < dist[v])
dist[v] = dist[u] + weight;
}
}
// Step 3: Check for negative-weight cycles
for (int i = 0; i < E; i++) {
int u = graph->edge[i].src;
int v = graph->edge[i].dest;
int weight = graph->edge[i].weight;
if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
printf("Graph contains negative weight cycle\n");

return; // If negative cycle is detected, simply return
}
}
// Print the shortest distances from the source
printArr(dist, V);
}
// Driver's code
int main() {
int V, E;
// Accept the number of vertices and edges from the user
cout << "Enter number of vertices: ";
cin >> V;
cout << "Enter number of edges: ";
cin >> E;
// Create the graph
struct Graph* graph = createGraph(V, E);
// Accept the details of each edge from the user
cout << "Enter the edges (src, dest, weight) for each edge:\n";
for (int i = 0; i < E; i++) {
cout << "Edge " << i + 1 << ":\n";
cout << "Source vertex: ";
cin >> graph->edge[i].src;
cout << "Destination vertex: ";
cin >> graph->edge[i].dest;
cout << "Weight: ";
cin >> graph->edge[i].weight;
}

// Source vertex for Bellman-Ford

int src;
cout << "Enter the source vertex: ";
cin >> src;
// Call Bellman-Ford function
BellmanFord(graph, src);
// Clean up dynamically allocated memory
delete[] graph->edge;
delete graph;
return 0;
}
