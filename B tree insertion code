"""INSERTION CODE:"""
#include <iostream>
using namespace std;

// A BTree node
class BTreeNode
{
int *keys; // An array of keys
int t; // Minimum degree (defines the range for number of keys)
BTreeNode **C; // An array of child pointers
int n; // Current number of keys
bool leaf; // Is true when node is leaf. Otherwise false
public:
BTreeNode(int _t, bool _leaf); // Constructor

// A utility function to insert a new key in the subtree rooted with
// this node. The assumption is, the node must be non-full when this
// function is called
void insertNonFull(int k);

// A utility function to split the child y of this node. i is index of y in
// child array C[]. The Child y must be full when this function is called
void splitChild(int i, BTreeNode *y);

// A function to traverse all nodes in a subtree rooted with this node
void traverse();

// A function to search a key in the subtree rooted with this node.
BTreeNode *search(int k); // returns NULL if k is not present.

// Make BTree friend of this so that we can access private members of this
// class in BTree functions
friend class BTree;
};

// A BTree
class BTree
{
BTreeNode *root; // Pointer to root node
int t; // Minimum degree
public:
// Constructor (Initializes tree as empty)
BTree(int _t)
{ root = NULL; t = _t; }

// function to traverse the tree
void traverse()
{ if (root != NULL) root->traverse(); }

// function to search a key in this tree

BTreeNode* search(int k)
{ return (root == NULL)? NULL : root->search(k); }

// The main function that inserts a new key in this B-Tree
void insert(int k);
};

// Constructor for BTreeNode class
BTreeNode::BTreeNode(int t1, bool leaf1)
{
// Copy the given minimum degree and leaf property
t = t1;
leaf = leaf1;

// Allocate memory for maximum number of possible keys
// and child pointers
keys = new int[2*t-1];
C = new BTreeNode *[2*t];

// Initialize the number of keys as 0
n = 0;
}

// Function to traverse all nodes in a subtree rooted with this node
void BTreeNode::traverse()
{
int i;

for (i = 0; i < n; i++)
{
if (leaf == false)
C[i]->traverse();
cout << " " << keys[i];
}

if (leaf == false)
C[i]->traverse();
}

// Function to search key k in subtree rooted with this node
BTreeNode *BTreeNode::search(int k)
{
int i = 0;
while (i < n && k > keys[i])
i++;

if (keys[i] == k)
return this;

if (leaf == true)
return NULL;

return C[i]->search(k);
}

// The main function that inserts a new key in this B-Tree
void BTree::insert(int k)
{
if (root == NULL)
{
root = new BTreeNode(t, true);
root->keys[0] = k;
root->n = 1;
}
else
{
if (root->n == 2*t-1)
{
BTreeNode *s = new BTreeNode(t, false);
s->C[0] = root;
s->splitChild(0, root);

int i = 0;
if (s->keys[0] < k)
i++;
s->C[i]->insertNonFull(k);

root = s;
}
else
{
root->insertNonFull(k);

}
}
}

// A utility function to insert a new key in this node
void BTreeNode::insertNonFull(int k)
{
int i = n - 1;

if (leaf == true)
{
while (i >= 0 && keys[i] > k)
{
keys[i+1] = keys[i];
i--;
}
keys[i+1] = k;
n++;
}
else
{
while (i >= 0 && keys[i] > k)
i--;

if (C[i+1]->n == 2*t-1)
{
splitChild(i+1, C[i+1]);

if (keys[i+1] < k)
i++;
}
C[i+1]->insertNonFull(k);
}
}

// A utility function to split the child y of this node
void BTreeNode::splitChild(int i, BTreeNode *y)
{
BTreeNode *z = new BTreeNode(y->t, y->leaf);
z->n = t - 1;

for (int j = 0; j < t-1; j++)
z->keys[j] = y->keys[j+t];

if (y->leaf == false)
{
for (int j = 0; j < t; j++)
z->C[j] = y->C[j+t];
}

y->n = t - 1;

for (int j = n; j >= i+1; j--)
C[j+1] = C[j];

C[i+1] = z;

for (int j = n-1; j >= i; j--)
keys[j+1] = keys[j];

keys[i] = y->keys[t-1];

n++;
}

// Driver program to test above functions
int main()
{
int degree;
cout << "Enter the minimum degree of the B-Tree: ";
cin >> degree;
BTree t(degree);

int numKeys, key;
cout << "Enter the number of keys you want to insert: ";
cin >> numKeys;

// Inserting keys into the B-Tree
for (int i = 0; i < numKeys; i++) {
cout << "Enter key " << i + 1 << ": ";
cin >> key;

t.insert(key);
}

cout << "Traversal of the constructed tree is: ";
t.traverse();
cout << endl;

// Searching for keys
int searchKey;
cout << "Enter key to search in the tree: ";
cin >> searchKey;
BTreeNode *result = t.search(searchKey);
if (result != NULL)
cout << "Key " << searchKey << " is present in the tree." << endl;
else
cout << "Key " << searchKey << " is not present in the tree." << endl;

return 0;
}
