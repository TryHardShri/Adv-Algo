#include <bits/stdc++.h>
using namespace std;
class DSU {
int* parent;
int* rank;
public:
DSU(int n) {
parent = new int[n];
rank = new int[n];
for (int i = 0; i < n; i++) {
parent[i] = i; // Parent of each node is itself initially
rank[i] = 0; // Rank is 0 initially
}
}
// Find function with path compression
int find(int i) {
if (parent[i] != i)
parent[i] = find(parent[i]); // Path compression
return parent[i];
}
// Union function with union by rank
void unite(int x, int y) {
int s1 = find(x);
int s2 = find(y);
if (s1 != s2) {
// Union by rank

if (rank[s1] < rank[s2]) {
parent[s1] = s2;
} else if (rank[s1] > rank[s2]) {
parent[s2] = s1;
} else {
parent[s2] = s1;
rank[s1] += 1;
}
}
}
};
class Graph {
vector<vector<int> > edgelist;
int V;
public:
Graph(int V) { this->V = V; }
// Function to add edge in a graph
void addEdge(int x, int y, int w) {
edgelist.push_back({ w, x, y });
}
// Kruskal's algorithm to find MST
void kruskals_mst() {
sort(edgelist.begin(), edgelist.end()); // Sort edges by

weight

DSU s(V);
int ans = 0;
cout << "Following are the edges in the constructed MST:"

<< endl;

// Iterate through all edges, add to MST if no cycle is

formed

for (auto edge : edgelist) {
int w = edge[0];
int x = edge[1];
int y = edge[2];
// Check if x and y are in the same set, if not, unite

them

if (s.find(x) != s.find(y)) {
s.unite(x, y);
ans += w;
cout << x << " -- " << y << " == " << w <<

endl;

}
}
cout << "Minimum Cost Spanning Tree: " << ans << endl;
}
};
// Driver code
int main() {
int V, E;
cout << "Enter the number of vertices: ";
cin >> V;
cout << "Enter the number of edges: ";
cin >> E;
Graph g(V);
for (int i = 0; i < E; i++) {
int x, y, w;
cout << "Enter edge (x y weight): ";
cin >> x >> y >> w;

// Use 0-based indexing for vertices.
g.addEdge(x, y, w);
}
// Function call
g.kruskals_mst();
return 0;
}
